package com.miniblog.api.fake.like;

import com.miniblog.api.like.application.port.LikeHistoryRepository;
import com.miniblog.api.like.domain.LikeHistory;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class FakeLikeHistoryRepository implements LikeHistoryRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final Map<Long, LikeHistory> likeHistories = new ConcurrentHashMap<>();

    @Override
    public LikeHistory save(LikeHistory likeHistory) {
        if (likeHistory.getId() == null || likeHistory.getId() == 0) {
            Long id = autoGeneratedId.incrementAndGet();
            LikeHistory newLikeHistory = likeHistory.toBuilder().id(id).build();
            likeHistories.put(id, newLikeHistory);
            return newLikeHistory;
        } else {
            likeHistories.put(likeHistory.getId(), likeHistory);
            return likeHistory;
        }
    }

    @Override
    public void delete(LikeHistory likeHistory) {
        likeHistories.remove(likeHistory.getId());
    }

    @Override
    public boolean existsByMemberIdAndPostId(Long memberId, Long postId) {
        return likeHistories.values().stream()
                .anyMatch(like -> like.getMember().getId().equals(memberId) && like.getPost().getId().equals(postId));
    }

    @Override
    public Optional<LikeHistory> findByMemberIdAndPostId(Long memberId, Long postId) {
        return likeHistories.values().stream()
                .filter(like -> like.getMember().getId().equals(memberId) && like.getPost().getId().equals(postId))
                .findFirst();
    }

    @Override
    public void deleteAllByPostId(Long postId) {
        likeHistories.values().removeIf(like -> like.getPost().getId().equals(postId));
    }

    @Override
    public void deleteAllByMemberId(Long memberId) {
        likeHistories.values().removeIf(like -> like.getMember().getId().equals(memberId));
    }

    @Override
    public void deleteAllByPostIds(List<Long> postIds) {
        likeHistories.values().removeIf(like -> postIds.contains(like.getPost().getId()));
    }
}
