package com.miniblog.api.fake.auth;

import com.miniblog.api.auth.application.port.RefreshTokenRepository;
import com.miniblog.api.auth.domain.RefreshToken;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final Map<Long, RefreshToken> tokens = new ConcurrentHashMap<>();

    @Override
    public RefreshToken save(RefreshToken refreshToken) {
        if (refreshToken.getId() == null || refreshToken.getId() == 0) {
            long newId = autoGeneratedId.incrementAndGet();
            RefreshToken newToken = refreshToken.toBuilder().id(newId).build();
            tokens.put(newId, newToken);
            return newToken;
        } else {
            tokens.put(refreshToken.getId(), refreshToken);
            return refreshToken;
        }
    }

    @Override
    public void deleteByToken(String token) {
        tokens.values().removeIf(tokenData -> tokenData.getToken().equals(token));
    }

    @Override
    public void delete(RefreshToken refreshToken) {
        tokens.remove(refreshToken.getId());
    }

    @Override
    public void deleteExpiredTokens(LocalDateTime now) {
        tokens.values().removeIf(tokenData -> tokenData.getExpiresDate().isBefore(now));
    }

    @Override
    public void deleteAllByIdInBatch(List<Long> ids) {
        ids.forEach(tokens::remove);
    }

    @Override
    public void deleteAllByMemberId(Long memberId) {
        tokens.values().removeIf(tokenData -> Objects.equals(tokenData.getMember().getId(), memberId));
    }

    @Override
    public Optional<RefreshToken> findByToken(String token) {
        return tokens.values().stream()
                .filter(tokenData -> tokenData.getToken().equals(token))
                .findFirst();
    }

    @Override
    public List<RefreshToken> findAllByMemberId(Long memberId) {
        return tokens.values().stream()
                .filter(tokenData -> Objects.equals(tokenData.getMember().getId(), memberId))
                .collect(Collectors.toList());
    }
}
