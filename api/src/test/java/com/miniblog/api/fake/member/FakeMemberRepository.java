package com.miniblog.api.fake.member;

import com.miniblog.api.member.application.port.MemberRepository;
import com.miniblog.api.member.domain.Member;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemberRepository implements MemberRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final Map<Long, Member> memberStore = new ConcurrentHashMap<>();

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            long newId = autoGeneratedId.incrementAndGet();
            Member newMember = member.toBuilder().id(newId).build();
            memberStore.put(newId, newMember);
            return newMember;
        } else {
            memberStore.put(member.getId(), member);
            return member;
        }
    }

    @Override
    public void updateLastActivity(Long memberId, LocalDateTime now) {
        memberStore.computeIfPresent(memberId, (id, member) ->
                member.toBuilder().lastActivityDate(now).build()
        );
    }

    @Override
    public void delete(Member member) {
        memberStore.remove(member.getId());
    }

    @Override
    public Optional<Member> findById(long id) {
        return Optional.ofNullable(memberStore.get(id));
    }

    @Override
    public Optional<Member> findByUsername(String username) {
        return memberStore.values().stream()
                .filter(member -> member.getUsername().equals(username))
                .findFirst();
    }

    @Override
    public Optional<Member> findByEmail(String email) {
        return memberStore.values().stream()
                .filter(member -> member.getEmail().equals(email))
                .findFirst();
    }

    @Override
    public boolean existsById(Long id) {
        return memberStore.containsKey(id);
    }

    @Override
    public boolean existsByUsername(String username) {
        return memberStore.values().stream()
                .anyMatch(member -> member.getUsername().equals(username));
    }

    @Override
    public boolean existsByNickname(String nickname) {
        return memberStore.values().stream()
                .anyMatch(member -> member.getNickname().equals(nickname));
    }

    @Override
    public boolean existsByEmail(String email) {
        return memberStore.values().stream()
                .anyMatch(member -> member.getEmail().equals(email));
    }
}
